
# Need section to convert do_droplet_region_long to a valid shortcode:
# New York City (USA) = nyc1, nyc3
# San Francisco (USA) = sfo2, sfo3
# Amsterdam (NLD) = ams3
# Frankfurt (DEU) = fra1
# Singapore (SGP) = sgp1
# London (GBR) = lon1
# Toronto (CAN) = tor1
# Balgalore (IND) = blr1

- name: Set valid digitalocean area code for New York City.
  set_fact:
    do_droplet_region: "nyc3"
    matrix_jitsi_timezone: "America/New_York"
  when: do_droplet_region_long == "New York City (USA)"

- name: Set valid digitalocean area code for San Francisco.
  set_fact:
    do_droplet_region: "sfo3"
    matrix_jitsi_timezone: "America/Los_Angeles"
  when: do_droplet_region_long == "San Francisco (USA)"

- name: Set valid digitalocean area code for Amsterdam.
  set_fact:
    do_droplet_region: "ams3"
    matrix_jitsi_timezone: "Europe/Amsterdam"
  when: do_droplet_region_long == "Amsterdam (NLD)"

- name: Set valid digitalocean area code for Frankfurt.
  set_fact:
    do_droplet_region: "fra1"
    matrix_jitsi_timezone: "Europe/Berlin"
  when: do_droplet_region_long == "Frankfurt (DEU)"

- name: Set valid digitalocean area code for Singapore.
  set_fact:
    do_droplet_region: "sgp1"
    matrix_jitsi_timezone: "Singapore"
  when: do_droplet_region_long == "Singapore (SGP)"

- name: Set valid digitalocean area code for London.
  set_fact:
    do_droplet_region: "lon1"
    matrix_jitsi_timezone: "Europe/London"
  when: do_droplet_region_long == "London (GBR)"

- name: Set valid digitalocean area code for Toronto.
  set_fact:
    do_droplet_region: "tor1"
    matrix_jitsi_timezone: "America/Toronto"
  when: do_droplet_region_long == "Toronto (CAN)"

- name: Set valid digitalocean area code for Balgalore.
  set_fact:
    do_droplet_region: "blr1"
    matrix_jitsi_timezone: "Asia/Kolkata"
  when: do_droplet_region_long == "Balgalore (IND)"

- name: Set MAU limit for Micro Server
  set_fact:
    slug_size: "s-1vcpu-2gb"
    swap_size: "2G"
    mau_limit: 5
  when: plan_title=="Micro Server"

- name: Set MAU limit for Small Server
  set_fact:
    slug_size: "s-2vcpu-4gb"
    swap_size: "2G"
    mau_limit: 25
  when: plan_title=="Small Server"

- name: Set MAU limit for Medium Server
  set_fact:
    slug_size: "s-4vcpu-8gb"
    swap_size: "4G"
    mau_limit: 50
  when: plan_title=="Medium Server"

- name: Set MAU limit for Large Server
  set_fact:
    slug_size: "s-8vcpu-16gb"
    swap_size: "8G"
    mau_limit: 100
  when: plan_title=="Large Server"

- name: Set MAU limit for Jumbo Server
  set_fact:
    slug_size: "so-16vcpu-128gb"
    swap_size: "16G"
    mau_limit: 1000
  when: plan_title=="Jumbo Server"

- name: do_droplet_region line to server_vars.yml file locally on AWX
  lineinfile:
    dest: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/server_vars.yml'
    line: 'do_droplet_region: {{ do_droplet_region }}'
    mode: '0600'
    state: present

- name: 
  community.digitalocean.digital_ocean_sshkey_info:
    oauth_token: '{{ do_api_token }}'
  register: ssh_keys

- debug:
    msg: "{{ ssh_keys }}"

- name: Build an array of all the ssh key ids
  set_fact:
    ssh_key_id_array: "{{ ssh_key_id_array }} + [ '{{ item.id }}' ]"
  with_items: "{{ ssh_keys.data }}"

- debug:
    msg: "{{ ssh_key_id_array }}"

- name: Spawn a new Digital Ocean Droplet
  community.digitalocean.digital_ocean_droplet:
    state: present
    name: '{{ matrix_domain }}'
    oauth_token: '{{ do_api_token }}'
    size: '{{ slug_size }}'
    ssh_keys: '{{ ssh_key_id_array }}'
    region: '{{ do_droplet_region }}'
    image: '{{ do_image }}'
    ipv6: yes
    wait: yes
    unique_name: yes
  register: new_server_info

- debug:
    msg: "{{ new_server_info }}"

- debug:
    msg: "{{ new_server_info.data.droplet }}"

- name: Assign server IPs to variables
  set_fact:
    server_ipv4: "{{ new_server_info.data.ip_address }}"
    server_ipv6: "{{ new_server_info.data.ipv6_address }}"

- debug:
    msg: "{{ server_ipv4 }}"

- debug:
    msg: "{{ server_ipv6 }}"


