
- name: Set MAU limit for Micro Server
  delegate_to: 127.0.0.1
  set_fact:
    swap_size: "2G"
    plan_title: "Micro Server"
  when: plan_title_long == "Micro Server ~5 users (1vcpu-1gb)"

- name: Set MAU limit for Small Server
  delegate_to: 127.0.0.1
  set_fact:
    swap_size: "2G"
    plan_title: "Small Server"
  when: plan_title_long == "Small Server ~25 users (1vcpu-2gb)"

- name: Set MAU limit for Medium Server
  delegate_to: 127.0.0.1
  set_fact:
    swap_size: "4G"
    plan_title: "Medium Server"
  when: plan_title_long == "Medium Server ~50 users (2vcpu-4gb)"

- name: Set MAU limit for Large Server
  delegate_to: 127.0.0.1
  set_fact:
    swap_size: "8G"
    plan_title: "Large Server"
  when: plan_title_long == "Large Server ~100 users (4vcpu-8gb)"

- name: Set MAU limit for Jumbo Server
  delegate_to: 127.0.0.1
  set_fact:
    swap_size: "32G"
    plan_title: "Large Server"
  when: plan_title_long == "Jumbo Server ~1000 users (8vcpu-32gb)"

- debug:
    msg: "{{ server_ipv4 }}"

- debug:
    msg: "{{ server_ipv6 }}"
  when: server_ipv6 is defined  

- debug: msg="No IP address is defined, please enter the IP address of your server."
  when: server_ipv4|length == 0 and server_ipv6|length == 0

- meta: end_play
  when: server_ipv4|length == 0 and server_ipv6|length == 0

- name: Set server_ip_final if both IPv4 and IPv6 are defined.
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ server_ipv4 }}'
  when: server_ipv4|length > 0 and server_ipv6|length > 0

- name: Set server_ip_final if only IPv4 is defined.
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ server_ipv4 }}'
  when: server_ipv4|length > 0 and server_ipv6|length == 0

- name: Set server_ip_final if only IPv6 is defined.
  delegate_to: 127.0.0.1
  set_fact:
    server_ip_final: '{{ server_ipv6 }}'
  when: server_ipv4|length == 0 and server_ipv6|length > 0

- name: Test if SSH is possible with ipv4
  delegate_to: "{{ server_ip_final }}"
  command: echo success
  register: echo_output

- debug:
    msg: "{{ echo_output.stdout }}"

- name: Disable password authentication
  delegate_to: "{{ server_ip_final }}"
  lineinfile:
    path: /etc/ssh/sshd_config
    line: 'PasswordAuthentication no'

- name: Restart SSH
  delegate_to: "{{ server_ip_final }}"
  service:
    name: ssh
    state: restarted

- name: Collect timezone of connected server (Debian and derivatives only) 
  delegate_to: "{{ server_ip_final }}"
  command: cat /etc/timezone
  register: timezone_output

- name: Set valid timezone for Jitsi instance
  delegate_to: 127.0.0.1
  set_fact:
    matrix_jitsi_timezone: "{{ timezone_output.stdout }}"

