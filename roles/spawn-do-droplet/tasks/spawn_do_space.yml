#
# DigitalOcean Spaces
#    From Spaces in NYC3 to Droplets in NYC1, NYC2, and NYC3
#    From Spaces in SGP1 to Droplets in SGP1
#    From Spaces in SFO2 to Droplets in SFO1, SFO2, and SFO3
#    From Spaces in AMS3 to Droplets in AMS2 and AMS3
#    From Spaces in FRA1 to Droplets in FRA1

- name: Set spaces region for nyc
  set_fact:
    do_spaces_region: "nyc3"
  when: do_droplet_region=="nyc1" or do_droplet_region=="nyc2" or do_droplet_region=="nyc3"

- name: Set spaces region for sgp
  set_fact:
    do_spaces_region: "sgp1"
  when: do_droplet_region=="sgp1"

- name: Set spaces region for sfo
  set_fact:
    do_spaces_region: "sfo2"
  when: do_droplet_region=="sfo1" or do_droplet_region=="sfo2" or do_droplet_region=="sfo3"

- name: Set spaces region for ams
  set_fact:
    do_spaces_region: "ams3"
  when: do_droplet_region=="ams2" or do_droplet_region=="ams3"

- name: Set spaces region for fra
  set_fact:
    do_spaces_region: "fra1"
  when: do_droplet_region=="fra1"

- debug:
    msg: "{{ do_spaces_region }}"

- name: do_spaces_region line to do_droplet.yml file locally on AWX
  delegate_to: 127.0.0.1
  lineinfile:
    dest: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/do_droplet.yml'
    line: 'do_spaces_region: {{ do_spaces_region }}'
    mode: '0600'
    state: present

- name: Install python3-boto on tower with yum
  delegate_to: 127.0.0.1
  yum:
    name: python3-boto3
    state: latest

- name: Install s3cmd on tower with yum
  delegate_to: 127.0.0.1
  yum:
    name: s3cmd
    state: latest

- name: Create s3cmd config directory if it does not exist locally on AWX
  delegate_to: 127.0.0.1
  file:
    path: /var/lib/awx/projects/hosting/s3cmd
    state: directory
    mode: '0700'

- name: Create an empty s3cmd config file if it doesn't exist
  delegate_to: 127.0.0.1
  file:
    path: '/var/lib/awx/projects/hosting/s3cmd/s3cfg-{{ do_spaces_region }}'
    state: touch

- name: Create s3cmd config file for region using blockinfile
  delegate_to: 127.0.0.1
  blockinfile:
    dest: '/var/lib/awx/projects/hosting/s3cmd/s3cfg-{{ do_spaces_region }}'
    block: |
      [default]
      access_key = {{ do_spaces_access_key }}
      access_token = 
      add_encoding_exts = 
      add_headers = 
      bucket_location = US
      ca_certs_file = 
      cache_file = 
      check_ssl_certificate = True
      check_ssl_hostname = True
      cloudfront_host = cloudfront.amazonaws.com
      connection_pooling = True
      content_disposition = 
      content_type = 
      default_mime_type = binary/octet-stream
      delay_updates = False
      delete_after = False
      delete_after_fetch = False
      delete_removed = False
      dry_run = False
      enable_multipart = True
      encoding = UTF-8
      encrypt = False
      expiry_date = 
      expiry_days = 
      expiry_prefix = 
      follow_symlinks = False
      force = False
      get_continue = False
      gpg_command = /usr/bin/gpg
      gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
      gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
      gpg_passphrase =
      guess_mime_type = True
      host_base = {{ do_spaces_region }}.digitaloceanspaces.com
      host_bucket = %(bucket)s.{{ do_spaces_region }}.digitaloceanspaces.com
      human_readable_sizes = False
      invalidate_default_index_on_cf = False
      invalidate_default_index_root_on_cf = True
      invalidate_on_cf = False
      kms_key = 
      limit = -1
      limitrate = 0
      list_md5 = False
      log_target_prefix = 
      long_listing = False
      max_delete = -1
      mime_type = 
      multipart_chunk_size_mb = 15
      multipart_max_chunks = 10000
      preserve_attrs = True
      progress_meter = True
      proxy_host = 
      proxy_port = 0
      public_url_use_https = False
      put_continue = False
      recursive = False
      recv_chunk = 65536
      reduced_redundancy = False
      requester_pays = False
      restore_days = 1
      restore_priority = Standard
      secret_key = {{ do_spaces_secret_key }}
      send_chunk = 65536
      server_side_encryption = False
      signature_v2 = False
      signurl_use_https = False
      simpledb_host = sdb.amazonaws.com
      skip_existing = False
      socket_timeout = 300
      stats = False
      stop_on_error = False
      storage_class = 
      throttle_max = 100
      upload_id = 
      urlencoding_mode = normal
      use_http_expect = False
      use_https = True
      use_mime_magic = True
      verbosity = WARNING
      website_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com/
      website_error = 
      website_index = index.html
    backup: no

- name: Run a command to list all DigitalOcean 'spaces'
  delegate_to: 127.0.0.1
  command: '/usr/bin/s3cmd ls --config=/var/lib/awx/projects/hosting/s3cmd/s3cfg-{{ do_spaces_region }}'
  register: list_of_spaces

- debug:
    msg: "{{ list_of_spaces }}"

- name: Run a command to create DigitalOcean 'space' if it doesn't exist
  delegate_to: 127.0.0.1
  command: 's3cmd mb s3://{{ matrix_domain }} --config=/var/lib/awx/projects/hosting/s3cmd/s3cfg-{{ do_spaces_region }}'
  when: matrix_domain not in list_of_spaces.stdout

